regla : sentencias+ EOF;

sentencias : declaracion | condicionIf | operacion | imprimir;

declaracion: TipoDato Identificador Igual (Digitos | Bools ) PuntoComa;

condicionIf : If ParentesisA (auxOp | auxOp OperadorLogico auxOpB ) ParentesisB LlaveA sentencias* LlaveB;

operacion :  Identificador Igual  (auxOp | operacionAritmetica ) PuntoComa;

operacionAritmetica returns [Object[] valores] : auxOp OperadorAritmetico (Identificador | Digitos );

imprimir : Print Identificador PuntoComa;

auxOp returns [Object identificador[]]: Identificador | Digitos | Bools;

auxOpB returns [Object identificador[]]: Identificador | Digitos | Bools;

If : 'if';
TipoDato : 'int' | 'boolean';
Print : 'print';
Igual : '=';
ParentesisA : '(';
ParentesisB : ')';
LlaveA : '{';
LlaveB : '}';
PuntoComa : ';';
OperadorLogico : '==' | '!=' | '>=' | '<=' | '<' | '>';
OperadorAritmetico : '+' | '-' | '/' | '*';
Bools : 'true' | 'false';
Identificador: [a-zA-Z_]([a-zA-Z0-9_])*;
Digitos : [0-9]+;
WHITE_SPACE : [ \t\r\n]+ -> skip;